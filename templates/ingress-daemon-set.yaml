apiVersion: v1
kind: Namespace
metadata:
  name: ingress-nginx-{{ juju_application }}
  labels:
    cdk-{{ juju_application }}-ingress: "true"

{%- if default_ssl_certificate_option %}
---
kind: Secret
apiVersion: v1
type: Opaque
metadata:
  name: default-ssl-certificate
  namespace: ingress-nginx-{{ juju_application }}
  labels:
    app.kubernetes.io/name: ingress-nginx-{{ juju_application }}
    app.kubernetes.io/part-of: ingress-nginx-{{ juju_application }}
    cdk-{{ juju_application }}-ingress: "true"
data:
  tls.crt: {{ default_ssl_certificate }}
  tls.key: {{ default_ssl_key }}
{%- endif %}

---
kind: ConfigMap
apiVersion: v1
metadata:
  name: nginx-configuration
  namespace: ingress-nginx-{{ juju_application }}
  labels:
    app.kubernetes.io/name: ingress-nginx-{{ juju_application }}
    app.kubernetes.io/part-of: ingress-nginx-{{ juju_application }}
    cdk-{{ juju_application }}-ingress: "true"
data:
  use-forwarded-headers: "{{ use_forwarded_headers }}"

---
kind: ConfigMap
apiVersion: v1
metadata:
  name: tcp-services
  namespace: ingress-nginx-{{ juju_application }}
  labels:
    app.kubernetes.io/name: ingress-nginx-{{ juju_application }}
    app.kubernetes.io/part-of: ingress-nginx-{{ juju_application }}
    cdk-{{ juju_application }}-ingress: "true"

---
kind: ConfigMap
apiVersion: v1
metadata:
  name: udp-services
  namespace: ingress-nginx-{{ juju_application }}
  labels:
    app.kubernetes.io/name: ingress-nginx-{{ juju_application }}
    app.kubernetes.io/part-of: ingress-nginx-{{ juju_application }}
    cdk-{{ juju_application }}-ingress: "true"

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: nginx-ingress-serviceaccount-{{ juju_application }}
  namespace: ingress-nginx-{{ juju_application }}
  labels:
    app.kubernetes.io/name: ingress-nginx-{{ juju_application }}
    app.kubernetes.io/part-of: ingress-nginx-{{ juju_application }}
    cdk-{{ juju_application }}-ingress: "true"

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: nginx-ingress-clusterrole-{{ juju_application }}
  labels:
    app.kubernetes.io/name: ingress-nginx-{{ juju_application }}
    app.kubernetes.io/part-of: ingress-nginx-{{ juju_application }}
    cdk-{{ juju_application }}-ingress: "true"
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - endpoints
      - nodes
      - pods
      - secrets
    verbs:
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - "extensions"
      - "networking.k8s.io"
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - "extensions"
      - "networking.k8s.io"
    resources:
      - ingresses/status
    verbs:
      - update
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  name: nginx-ingress-role-{{ juju_application }}
  namespace: ingress-nginx-{{ juju_application }}
  labels:
    app.kubernetes.io/name: ingress-nginx-{{ juju_application }}
    app.kubernetes.io/part-of: ingress-nginx-{{ juju_application }}
    cdk-{{ juju_application }}-ingress: "true"
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - pods
      - secrets
      - namespaces
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - configmaps
    resourceNames:
      # Defaults to "<election-id>-<ingress-class>"
      # Here: "<ingress-controller-leader>-<nginx>"
      # This has to be adapted if you change either parameter
      # when launching the nginx-ingress-controller.
      - "ingress-controller-leader-nginx"
    verbs:
      - get
      - update
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - create
  - apiGroups:
      - ""
    resources:
      - endpoints
    verbs:
      - get

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: nginx-ingress-role-nisa-binding-{{ juju_application }}
  namespace: ingress-nginx-{{ juju_application }}
  labels:
    app.kubernetes.io/name: ingress-nginx-{{ juju_application }}
    app.kubernetes.io/part-of: ingress-nginx-{{ juju_application }}
    cdk-{{ juju_application }}-ingress: "true"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: nginx-ingress-role-{{ juju_application }}
subjects:
  - kind: ServiceAccount
    name: nginx-ingress-serviceaccount-{{ juju_application }}
    namespace: ingress-nginx-{{ juju_application }}

---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: nginx-ingress-clusterrole-nisa-binding-{{ juju_application }}
  labels:
    app.kubernetes.io/name: ingress-nginx-{{ juju_application }}
    app.kubernetes.io/part-of: ingress-nginx-{{ juju_application }}
    cdk-{{ juju_application }}-ingress: "true"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: nginx-ingress-clusterrole-{{ juju_application }}
subjects:
  - kind: ServiceAccount
    name: nginx-ingress-serviceaccount-{{ juju_application }}
    namespace: ingress-nginx-{{ juju_application }}

---
apiVersion: {{ daemonset_api_version }}
kind: DaemonSet
metadata:
  name: nginx-ingress-controller-{{ juju_application }}
  namespace: ingress-nginx-{{ juju_application }}
  labels:
    app.kubernetes.io/name: ingress-nginx-{{ juju_application }}
    app.kubernetes.io/part-of: ingress-nginx-{{ juju_application }}
    juju-application: nginx-ingress-{{ juju_application }}
    cdk-{{ juju_application }}-ingress: "true"
    cdk-restart-on-ca-change: "true"
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: ingress-nginx-{{ juju_application }}
      app.kubernetes.io/part-of: ingress-nginx-{{ juju_application }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ingress-nginx-{{ juju_application }}
        app.kubernetes.io/part-of: ingress-nginx-{{ juju_application }}
      annotations:
        prometheus.io/port: "10254"
        prometheus.io/scrape: "true"
    spec:
      serviceAccountName: nginx-ingress-serviceaccount-{{ juju_application }}
      nodeSelector:
        juju-application: {{ juju_application }}
      terminationGracePeriodSeconds: 60
      # hostPort doesn't work with CNI, so we have to use hostNetwork instead
      # see https://github.com/kubernetes/kubernetes/issues/23920
      hostNetwork: true
      containers:
        - name: nginx-ingress-controller{{ juju_application }}
          image: {{ ingress_image }}
          args:
            - /nginx-ingress-controller
            - --configmap=$(POD_NAMESPACE)/nginx-configuration
            - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
            - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
            - --annotations-prefix=nginx.ingress.kubernetes.io
            - --enable-ssl-chain-completion={{ ssl_chain_completion }}
            - --enable-ssl-passthrough={{ enable_ssl_passthrough }}
{%- if default_ssl_certificate_option %}
            {{ default_ssl_certificate_option }}
{%- endif %}
          securityContext:
            capabilities:
              drop:
                - ALL
              add:
                - NET_BIND_SERVICE
            runAsUser: {{ ingress_uid }}
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          ports:
            - name: http
              containerPort: 80
            - name: https
              containerPort: 443
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1

---
